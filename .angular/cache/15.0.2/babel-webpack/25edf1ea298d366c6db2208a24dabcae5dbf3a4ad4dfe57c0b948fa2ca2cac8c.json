{"ast":null,"code":"import * as i0 from \"@angular/core\";\n//creamos un servicio para los metodos de obtener, añadir y eliminar los usuarios\nexport class UsuariosService {\n  constructor() {\n    //array vacio, pero guardará los datos para el local storage\n    this.usuarios = [];\n  }\n  //metodo para obtener los usuarios por el local storage\n  getUsuarios() {\n    if (localStorage.getItem('usuarios') === null) {\n      return this.usuarios;\n    } else {\n      this.usuarios = JSON.parse(localStorage.getItem('usuarios'));\n      return this.usuarios;\n    }\n  }\n  //metodo para añadir los usuarios por el local storage\n  addUsuarios(usuario) {\n    this.usuarios.push(usuario);\n    let usuarios = [];\n    if (localStorage.getItem('usuarios') === null) {\n      usuarios.push(usuario);\n      localStorage.setItem('usuarios', JSON.stringify(usuarios));\n    } else {\n      usuarios = JSON.parse(localStorage.getItem('usuarios'));\n      usuarios.push(usuario);\n      localStorage.setItem('usuarios', JSON.stringify(usuarios));\n    }\n  }\n  //metodo para eliminar los usuarios por el local storage\n  deleteUsuarios(usuarios) {\n    for (let i = 0; i < this.usuarios.length; i++) {\n      if (usuarios == this.usuarios[i]) {\n        this.usuarios.splice(i, 1);\n        localStorage.setItem('usuarios', JSON.stringify(this.usuarios));\n      }\n    }\n  }\n  static #_ = this.ɵfac = function UsuariosService_Factory(t) {\n    return new (t || UsuariosService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UsuariosService,\n    factory: UsuariosService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";AAMA;AACA,OAAM,MAAOA,eAAe;EAK1BC;IACE;IACA,IAAI,CAACC,QAAQ,GAAC,EACb;EACH;EACA;EACAC,WAAW;IACT,IAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,IAAI,EAAC;MAC3C,OAAO,IAAI,CAACH,QAAQ;KACrB,MAAI;MACH,IAAI,CAACA,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAE,CAAC;MAC7D,OAAO,IAAI,CAACH,QAAQ;;EAExB;EACA;EACAM,WAAW,CAACC,OAAiB;IAC3B,IAAI,CAACP,QAAQ,CAACQ,IAAI,CAACD,OAAO,CAAC;IAC3B,IAAIP,QAAQ,GAAe,EAAE;IAC7B,IAAGE,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,KAAK,IAAI,EAAC;MAC3CH,QAAQ,CAACQ,IAAI,CAACD,OAAO,CAAC;MACtBL,YAAY,CAACO,OAAO,CAAC,UAAU,EAAEL,IAAI,CAACM,SAAS,CAACV,QAAQ,CAAC,CAAC;KAC3D,MAAK;MACJA,QAAQ,GAACI,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,UAAU,CAAE,CAAC;MACtDH,QAAQ,CAACQ,IAAI,CAACD,OAAO,CAAC;MACtBL,YAAY,CAACO,OAAO,CAAC,UAAU,EAAEL,IAAI,CAACM,SAAS,CAACV,QAAQ,CAAC,CAAC;;EAE9D;EACA;EACAW,cAAc,CAACX,QAAkB;IAC/B,KAAI,IAAIY,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAE,IAAI,CAACZ,QAAQ,CAACa,MAAM,EAAED,CAAC,EAAE,EAAC;MACxC,IAAIZ,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACY,CAAC,CAAC,EAAC;QAC/B,IAAI,CAACZ,QAAQ,CAACc,MAAM,CAACF,CAAC,EAAE,CAAC,CAAC;QAC1BV,YAAY,CAACO,OAAO,CAAC,UAAU,EAACL,IAAI,CAACM,SAAS,CAAC,IAAI,CAACV,QAAQ,CAAC,CAAC;;;EAGpE;EAAC;qBAxCUF,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAAiB,SAAfjB,eAAe;IAAAkB,YAHd;EAAM","names":["UsuariosService","constructor","usuarios","getUsuarios","localStorage","getItem","JSON","parse","addUsuarios","usuario","push","setItem","stringify","deleteUsuarios","i","length","splice","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\crist\\OneDrive\\Documents\\GitHub\\PROYECTO-HOTEL-2DOPARCIAL\\src\\app\\servicios\\usuarios.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Usuarios } from '../models/usuarios';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n//creamos un servicio para los metodos de obtener, añadir y eliminar los usuarios\r\nexport class UsuariosService {\r\n\r\n  //declaramos un array de tipo Usuarios (models Usuarios)\r\n  usuarios: Usuarios[];\r\n\r\n  constructor() { \r\n    //array vacio, pero guardará los datos para el local storage\r\n    this.usuarios=[\r\n    ];\r\n  }\r\n  //metodo para obtener los usuarios por el local storage\r\n  getUsuarios(){\r\n    if(localStorage.getItem('usuarios') === null){\r\n      return this.usuarios;\r\n    }else{\r\n      this.usuarios = JSON.parse(localStorage.getItem('usuarios')!);\r\n      return this.usuarios;\r\n    }\r\n  }\r\n  //metodo para añadir los usuarios por el local storage\r\n  addUsuarios(usuario: Usuarios){\r\n    this.usuarios.push(usuario);\r\n    let usuarios: Usuarios[] = [];\r\n    if(localStorage.getItem('usuarios') === null){\r\n      usuarios.push(usuario);\r\n      localStorage.setItem('usuarios', JSON.stringify(usuarios));\r\n    } else{\r\n      usuarios=JSON.parse(localStorage.getItem('usuarios')!);\r\n      usuarios.push(usuario);\r\n      localStorage.setItem('usuarios', JSON.stringify(usuarios));\r\n    }\r\n  }\r\n  //metodo para eliminar los usuarios por el local storage\r\n  deleteUsuarios(usuarios: Usuarios){\r\n    for(let i=0; i< this.usuarios.length; i++){\r\n      if (usuarios == this.usuarios[i]){\r\n        this.usuarios.splice(i, 1);\r\n        localStorage.setItem('usuarios',JSON.stringify(this.usuarios));\r\n      }\r\n    }\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}